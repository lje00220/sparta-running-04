{"numFailedTestSuites":4,"numFailedTests":13,"numPassedTestSuites":4,"numPassedTests":17,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":8,"numTotalTests":30,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":0,"total":0,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1736756524554,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["extractNames 테스트"],"duration":3,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBe (/Users/jieun/Desktop/WEEK3/__test__/08.test.js:6:55)\n    at Promise.then.completed (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"extractNames 테스트 fetch 함수를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"fetch 함수를 사용하는지 확인"},{"ancestorTitles":["extractNames 테스트"],"duration":1,"failureDetails":[{"matcherResult":{"expected":["A","B"],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[\"A\", \"B\"]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[\"A\", \"B\"]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/jieun/Desktop/WEEK3/__test__/08.test.js:24:20)"],"fullName":"extractNames 테스트 records 내부의 name 값을 배열로 반환","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"records 내부의 name 값을 배열로 반환"},{"ancestorTitles":["extractNames 테스트"],"duration":1,"failureDetails":[{"matcherResult":{"expected":[],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/jieun/Desktop/WEEK3/__test__/08.test.js:39:20)"],"fullName":"extractNames 테스트 records가 비어있으면 빈 배열 반환","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"records가 비어있으면 빈 배열 반환"},{"ancestorTitles":["extractNames 테스트"],"duration":0,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.toHaveBeenCalledTimes (/Users/jieun/Desktop/WEEK3/__test__/08.test.js:48:26)"],"fullName":"extractNames 테스트 fetch 함수를 한 번만 호출","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"fetch 함수를 한 번만 호출"}],"endTime":1736756524790,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mextractNames 테스트 › fetch 함수를 사용하는지 확인\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 |\u001b[39m describe(\u001b[32m\"extractNames 테스트\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 5 |\u001b[39m   it(\u001b[32m\"fetch 함수를 사용하는지 확인\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 6 |\u001b[39m     expect(extractNames\u001b[33m.\u001b[39mtoString()\u001b[33m.\u001b[39mincludes(\u001b[32m\"fetch\"\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m   |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 7 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 8 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 9 |\u001b[39m   it(\u001b[32m\"records 내부의 name 값을 배열로 반환\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/08.test.js\u001b[39m\u001b[0m\u001b[2m:6:55)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mextractNames 테스트 › records 내부의 name 값을 배열로 반환\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[\"A\", \"B\"]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 22 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m extractNames(\u001b[32m\"http://fakeurl.com\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 24 |\u001b[39m     expect(result)\u001b[33m.\u001b[39mtoEqual([\u001b[32m\"A\"\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"B\"\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 26 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m   it(\u001b[32m\"records가 비어있으면 빈 배열 반환\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/08.test.js\u001b[39m\u001b[0m\u001b[2m:24:20)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mextractNames 테스트 › records가 비어있으면 빈 배열 반환\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 37 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 38 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m extractNames(\u001b[32m\"http://fakeurl.com\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 39 |\u001b[39m     expect(result)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 40 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 41 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 42 |\u001b[39m   it(\u001b[32m\"fetch 함수를 한 번만 호출\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/08.test.js\u001b[39m\u001b[0m\u001b[2m:39:20)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mextractNames 테스트 › fetch 함수를 한 번만 호출\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 46 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 47 |\u001b[39m     \u001b[36mawait\u001b[39m extractNames(\u001b[32m\"http://fakeurl.com\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 48 |\u001b[39m     expect(global\u001b[33m.\u001b[39mfetch)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 49 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 50 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 51 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledTimes (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/08.test.js\u001b[39m\u001b[0m\u001b[2m:48:26)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jieun/Desktop/WEEK3/__test__/08.test.js","startTime":1736756524566,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["transformUsers 테스트"],"duration":2,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBe (/Users/jieun/Desktop/WEEK3/__test__/06.test.js:6:55)\n    at Promise.then.completed (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"transformUsers 테스트 map 메서드를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"map 메서드를 사용하는지 확인"},{"ancestorTitles":["transformUsers 테스트"],"duration":1,"failureDetails":[{"matcherResult":{"expected":[{"fullName":"Alice Lee","isAdult":true},{"fullName":"Bob Kim","isAdult":false}],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"fullName\": \"Alice Lee\", \"isAdult\": true}, {\"fullName\": \"Bob Kim\", \"isAdult\": false}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"fullName\": \"Alice Lee\", \"isAdult\": true}, {\"fullName\": \"Bob Kim\", \"isAdult\": false}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/jieun/Desktop/WEEK3/__test__/06.test.js:15:20)\n    at Promise.then.completed (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"transformUsers 테스트 fullName과 isAdult를 올바르게 변환","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"fullName과 isAdult를 올바르게 변환"},{"ancestorTitles":["transformUsers 테스트"],"duration":0,"failureDetails":[{"matcherResult":{"expected":[],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/jieun/Desktop/WEEK3/__test__/06.test.js:23:20)\n    at Promise.then.completed (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"transformUsers 테스트 빈 배열이 주어졌을 때 빈 배열 반환","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"빈 배열이 주어졌을 때 빈 배열 반환"},{"ancestorTitles":["transformUsers 테스트"],"duration":0,"failureDetails":[{}],"failureMessages":["TypeError: Cannot read properties of undefined (reading 'length')\n    at Object.length (/Users/jieun/Desktop/WEEK3/__test__/06.test.js:32:19)\n    at Promise.then.completed (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"transformUsers 테스트 새로운 배열의 길이는 기존 배열과 같아야 함","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"새로운 배열의 길이는 기존 배열과 같아야 함"}],"endTime":1736756524844,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mtransformUsers 테스트 › map 메서드를 사용하는지 확인\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 |\u001b[39m describe(\u001b[32m\"transformUsers 테스트\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 5 |\u001b[39m   it(\u001b[32m\"map 메서드를 사용하는지 확인\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 6 |\u001b[39m     expect(transformUsers\u001b[33m.\u001b[39mtoString()\u001b[33m.\u001b[39mincludes(\u001b[32m\"map\"\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m   |\u001b[39m                                                       \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 7 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 8 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 9 |\u001b[39m   it(\u001b[32m\"fullName과 isAdult를 올바르게 변환\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/06.test.js\u001b[39m\u001b[0m\u001b[2m:6:55)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mtransformUsers 테스트 › fullName과 isAdult를 올바르게 변환\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"fullName\": \"Alice Lee\", \"isAdult\": true}, {\"fullName\": \"Bob Kim\", \"isAdult\": false}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 13 |\u001b[39m     ]\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 14 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m transformUsers(users)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 15 |\u001b[39m     expect(result)\u001b[33m.\u001b[39mtoEqual([\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 16 |\u001b[39m       { fullName\u001b[33m:\u001b[39m \u001b[32m\"Alice Lee\"\u001b[39m\u001b[33m,\u001b[39m isAdult\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 17 |\u001b[39m       { fullName\u001b[33m:\u001b[39m \u001b[32m\"Bob Kim\"\u001b[39m\u001b[33m,\u001b[39m isAdult\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 18 |\u001b[39m     ])\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/06.test.js\u001b[39m\u001b[0m\u001b[2m:15:20)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mtransformUsers 테스트 › 빈 배열이 주어졌을 때 빈 배열 반환\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 21 |\u001b[39m   it(\u001b[32m\"빈 배열이 주어졌을 때 빈 배열 반환\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m transformUsers([])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 23 |\u001b[39m     expect(result)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 24 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 26 |\u001b[39m   it(\u001b[32m\"새로운 배열의 길이는 기존 배열과 같아야 함\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/06.test.js\u001b[39m\u001b[0m\u001b[2m:23:20)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mtransformUsers 테스트 › 새로운 배열의 길이는 기존 배열과 같아야 함\u001b[39m\u001b[22m\n\n    TypeError: Cannot read properties of undefined (reading 'length')\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 |\u001b[39m     ]\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 31 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m transformUsers(users)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 32 |\u001b[39m     expect(result\u001b[33m.\u001b[39mlength)\u001b[33m.\u001b[39mtoBe(users\u001b[33m.\u001b[39mlength)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                   \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 33 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 34 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.length (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/06.test.js\u001b[39m\u001b[0m\u001b[2m:32:19)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jieun/Desktop/WEEK3/__test__/06.test.js","startTime":1736756524793,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["filterTodosByKeyword 테스트"],"duration":1,"failureDetails":[{"matcherResult":{"actual":false,"expected":true,"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m","name":"toBe","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\nExpected: \u001b[32mtrue\u001b[39m\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBe (/Users/jieun/Desktop/WEEK3/__test__/07.test.js:6:63)\n    at Promise.then.completed (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"filterTodosByKeyword 테스트 fetch 함수를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"fetch 함수를 사용하는지 확인"},{"ancestorTitles":["filterTodosByKeyword 테스트"],"duration":1,"failureDetails":[{"matcherResult":{"expected":[{"id":1,"title":"Hello World"},{"id":3,"title":"hello kitty"}],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"id\": 1, \"title\": \"Hello World\"}, {\"id\": 3, \"title\": \"hello kitty\"}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[{\"id\": 1, \"title\": \"Hello World\"}, {\"id\": 3, \"title\": \"hello kitty\"}]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/jieun/Desktop/WEEK3/__test__/07.test.js:20:20)"],"fullName":"filterTodosByKeyword 테스트 keyword가 포함된 title만 필터링하여 반환","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"keyword가 포함된 title만 필터링하여 반환"},{"ancestorTitles":["filterTodosByKeyword 테스트"],"duration":0,"failureDetails":[{"matcherResult":{"expected":[],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m[]\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/jieun/Desktop/WEEK3/__test__/07.test.js:36:20)"],"fullName":"filterTodosByKeyword 테스트 keyword와 일치하는 항목이 없으면 빈 배열 반환","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"keyword와 일치하는 항목이 없으면 빈 배열 반환"},{"ancestorTitles":["filterTodosByKeyword 테스트"],"duration":1,"failureDetails":[{"matcherResult":{"message":"\u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\nExpected number of calls: \u001b[32m1\u001b[39m\nReceived number of calls: \u001b[31m0\u001b[39m\n    at Object.toHaveBeenCalledTimes (/Users/jieun/Desktop/WEEK3/__test__/07.test.js:45:26)"],"fullName":"filterTodosByKeyword 테스트 fetch 함수를 한 번만 호출","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"fetch 함수를 한 번만 호출"}],"endTime":1736756525000,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfilterTodosByKeyword 테스트 › fetch 함수를 사용하는지 확인\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBe\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // Object.is equality\u001b[22m\n\n    Expected: \u001b[32mtrue\u001b[39m\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 4 |\u001b[39m describe(\u001b[32m\"filterTodosByKeyword 테스트\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m     \u001b[90m 5 |\u001b[39m   it(\u001b[32m\"fetch 함수를 사용하는지 확인\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 6 |\u001b[39m     expect(filterTodosByKeyword\u001b[33m.\u001b[39mtoString()\u001b[33m.\u001b[39mincludes(\u001b[32m\"fetch\"\u001b[39m))\u001b[33m.\u001b[39mtoBe(\u001b[36mtrue\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m   |\u001b[39m                                                               \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 7 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 8 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 9 |\u001b[39m   it(\u001b[32m\"keyword가 포함된 title만 필터링하여 반환\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBe (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/07.test.js\u001b[39m\u001b[0m\u001b[2m:6:63)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfilterTodosByKeyword 테스트 › keyword가 포함된 title만 필터링하여 반환\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[{\"id\": 1, \"title\": \"Hello World\"}, {\"id\": 3, \"title\": \"hello kitty\"}]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 18 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 19 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m filterTodosByKeyword(\u001b[32m\"hello\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 20 |\u001b[39m     expect(result)\u001b[33m.\u001b[39mtoEqual([\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 21 |\u001b[39m       { id\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m\u001b[33m,\u001b[39m title\u001b[33m:\u001b[39m \u001b[32m\"Hello World\"\u001b[39m }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 22 |\u001b[39m       { id\u001b[33m:\u001b[39m \u001b[35m3\u001b[39m\u001b[33m,\u001b[39m title\u001b[33m:\u001b[39m \u001b[32m\"hello kitty\"\u001b[39m }\u001b[33m,\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 23 |\u001b[39m     ])\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/07.test.js\u001b[39m\u001b[0m\u001b[2m:20:20)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfilterTodosByKeyword 테스트 › keyword와 일치하는 항목이 없으면 빈 배열 반환\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m[]\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 34 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 35 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m \u001b[36mawait\u001b[39m filterTodosByKeyword(\u001b[32m\"xyz\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 36 |\u001b[39m     expect(result)\u001b[33m.\u001b[39mtoEqual([])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 37 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 38 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 39 |\u001b[39m   it(\u001b[32m\"fetch 함수를 한 번만 호출\"\u001b[39m\u001b[33m,\u001b[39m \u001b[36masync\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/07.test.js\u001b[39m\u001b[0m\u001b[2m:36:20)\u001b[22m\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfilterTodosByKeyword 테스트 › fetch 함수를 한 번만 호출\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledTimes\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m)\u001b[22m\n\n    Expected number of calls: \u001b[32m1\u001b[39m\n    Received number of calls: \u001b[31m0\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 43 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 44 |\u001b[39m     \u001b[36mawait\u001b[39m filterTodosByKeyword(\u001b[32m\"hello\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 45 |\u001b[39m     expect(global\u001b[33m.\u001b[39mfetch)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                          \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 46 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 47 |\u001b[39m })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 48 |\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledTimes (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/07.test.js\u001b[39m\u001b[0m\u001b[2m:45:26)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jieun/Desktop/WEEK3/__test__/07.test.js","startTime":1736756524846,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["filterUserTodos 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"filterUserTodos 테스트 filter 메서드를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"filter 메서드를 사용하는지 확인"},{"ancestorTitles":["filterUserTodos 테스트"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"filterUserTodos 테스트 map 메서드를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"map 메서드를 사용하는지 확인"},{"ancestorTitles":["filterUserTodos 테스트"],"duration":2,"failureDetails":[{"matcherResult":{"actual":[],"expected":["운동하기"],"message":"\u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 3\u001b[39m\n\u001b[31m+ Received  + 1\u001b[39m\n\n\u001b[32m- Array [\u001b[39m\n\u001b[32m-   \"운동하기\",\u001b[39m\n\u001b[32m- ]\u001b[39m\n\u001b[31m+ Array []\u001b[39m","name":"toEqual","pass":false}}],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected  - 3\u001b[39m\n\u001b[31m+ Received  + 1\u001b[39m\n\n\u001b[32m- Array [\u001b[39m\n\u001b[32m-   \"운동하기\",\u001b[39m\n\u001b[32m- ]\u001b[39m\n\u001b[31m+ Array []\u001b[39m\n    at Object.toEqual (/Users/jieun/Desktop/WEEK3/__test__/05.test.js:26:20)\n    at Promise.then.completed (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:298:28)\n    at new Promise (<anonymous>)\n    at callAsyncCircusFn (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/utils.js:231:10)\n    at _callCircusTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:316:40)\n    at _runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:252:3)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:126:9)\n    at _runTestsForDescribeBlock (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:121:9)\n    at run (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/run.js:71:3)\n    at runAndTransformResultsToJestFormat (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapterInit.js:122:21)\n    at jestAdapter (/Users/jieun/Desktop/WEEK3/node_modules/jest-circus/build/legacy-code-todo-rewrite/jestAdapter.js:79:19)\n    at runTestInternal (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:367:16)\n    at runTest (/Users/jieun/Desktop/WEEK3/node_modules/jest-runner/build/runTest.js:444:34)"],"fullName":"filterUserTodos 테스트 조건에 맞는 title만 배열로 반환","invocations":1,"location":null,"numPassingAsserts":0,"retryReasons":[],"status":"failed","title":"조건에 맞는 title만 배열로 반환"},{"ancestorTitles":["filterUserTodos 테스트"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"filterUserTodos 테스트 조건에 맞는 항목이 없으면 빈 배열 반환","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"조건에 맞는 항목이 없으면 빈 배열 반환"},{"ancestorTitles":["filterUserTodos 테스트"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"filterUserTodos 테스트 새로운 배열의 길이는 기존 배열보다 작거나 같아야 함","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"새로운 배열의 길이는 기존 배열보다 작거나 같아야 함"}],"endTime":1736756525128,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[22m\u001b[1mfilterUserTodos 테스트 › 조건에 맞는 title만 배열로 반환\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected  - 3\u001b[39m\n    \u001b[31m+ Received  + 1\u001b[39m\n\n    \u001b[32m- Array [\u001b[39m\n    \u001b[32m-   \"운동하기\",\u001b[39m\n    \u001b[32m- ]\u001b[39m\n    \u001b[31m+ Array []\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 24 |\u001b[39m     ]\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 25 |\u001b[39m     \u001b[36mconst\u001b[39m result \u001b[33m=\u001b[39m filterUserTodos(userTodos\u001b[33m,\u001b[39m \u001b[35m1\u001b[39m\u001b[33m,\u001b[39m \u001b[32m\"low\"\u001b[39m)\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m    \u001b[31m\u001b[1m>\u001b[22m\u001b[2m\u001b[39m\u001b[90m 26 |\u001b[39m     expect(result)\u001b[33m.\u001b[39mtoEqual([\u001b[32m\"운동하기\"\u001b[39m])\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m    |\u001b[39m                    \u001b[31m\u001b[1m^\u001b[22m\u001b[2m\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 27 |\u001b[39m   })\u001b[33m;\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 28 |\u001b[39m\u001b[22m\n\u001b[2m     \u001b[90m 29 |\u001b[39m   it(\u001b[32m\"조건에 맞는 항목이 없으면 빈 배열 반환\"\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[22m\u001b[2m\u001b[0m\u001b[36m__test__/05.test.js\u001b[39m\u001b[0m\u001b[2m:26:20)\u001b[22m\u001b[2m\u001b[22m\n","name":"/Users/jieun/Desktop/WEEK3/__test__/05.test.js","startTime":1736756525006,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["createTodo 테스트"],"duration":2,"failureDetails":[],"failureMessages":[],"fullName":"createTodo 테스트 새로운 할 일을 기존 배열에 추가 후 반환","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"새로운 할 일을 기존 배열에 추가 후 반환"},{"ancestorTitles":["createTodo 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createTodo 테스트 id가 고유한지 확인","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"id가 고유한지 확인"},{"ancestorTitles":["createTodo 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"createTodo 테스트 기존 배열을 변경하지 않고 새로운 배열을 반환","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"기존 배열을 변경하지 않고 새로운 배열을 반환"}],"endTime":1736756525223,"message":"","name":"/Users/jieun/Desktop/WEEK3/__test__/02.test.js","startTime":1736756525131,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["updateTodoTitle 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"updateTodoTitle 테스트 map 메서드를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"map 메서드를 사용하는지 확인"},{"ancestorTitles":["updateTodoTitle 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"updateTodoTitle 테스트 특정 id의 title을 변경 후 새로운 배열을 반환","invocations":1,"location":null,"numPassingAsserts":3,"retryReasons":[],"status":"passed","title":"특정 id의 title을 변경 후 새로운 배열을 반환"},{"ancestorTitles":["updateTodoTitle 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"updateTodoTitle 테스트 존재하지 않는 id가 주어졌을 때 기존 배열을 그대로 반환","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"존재하지 않는 id가 주어졌을 때 기존 배열을 그대로 반환"},{"ancestorTitles":["updateTodoTitle 테스트"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"updateTodoTitle 테스트 새로운 배열의 길이는 기존 배열과 같아야 함","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"새로운 배열의 길이는 기존 배열과 같아야 함"}],"endTime":1736756525283,"message":"","name":"/Users/jieun/Desktop/WEEK3/__test__/03.test.js","startTime":1736756525224,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["deleteTodo 테스트"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"deleteTodo 테스트 filter 메서드를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"filter 메서드를 사용하는지 확인"},{"ancestorTitles":["deleteTodo 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"deleteTodo 테스트 특정 id의 todo를 제거하고 새로운 배열을 반환","invocations":1,"location":null,"numPassingAsserts":2,"retryReasons":[],"status":"passed","title":"특정 id의 todo를 제거하고 새로운 배열을 반환"},{"ancestorTitles":["deleteTodo 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"deleteTodo 테스트 존재하지 않는 id가 주어졌을 때 기존 배열을 그대로 반환","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"존재하지 않는 id가 주어졌을 때 기존 배열을 그대로 반환"},{"ancestorTitles":["deleteTodo 테스트"],"duration":0,"failureDetails":[],"failureMessages":[],"fullName":"deleteTodo 테스트 새로운 배열의 길이는 기존 배열보다 1 작아야 함","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"새로운 배열의 길이는 기존 배열보다 1 작아야 함"}],"endTime":1736756525359,"message":"","name":"/Users/jieun/Desktop/WEEK3/__test__/04.test.js","startTime":1736756525286,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["getIncompleteTodos 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getIncompleteTodos 테스트 필터를 사용하는지 확인","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"필터를 사용하는지 확인"},{"ancestorTitles":["getIncompleteTodos 테스트"],"duration":1,"failureDetails":[],"failureMessages":[],"fullName":"getIncompleteTodos 테스트 완료되지 않은 할 일만 반환","invocations":1,"location":null,"numPassingAsserts":1,"retryReasons":[],"status":"passed","title":"완료되지 않은 할 일만 반환"}],"endTime":1736756525439,"message":"","name":"/Users/jieun/Desktop/WEEK3/__test__/01.test.js","startTime":1736756525363,"status":"passed","summary":""}],"wasInterrupted":false}
